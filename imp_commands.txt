diff -u new_file old_file > diff_file 

patch file.py < file.diff 


# example 

cat "Hello World" > hello_world.txt

ravichandrans@FR-N-S096026 MINGW64 ~/Documents/GitHub/testrepo/Ignore (main)
$ cat hello_world.txt
Hello World

ravichandrans@FR-N-S096026 MINGW64 ~/Documents/GitHub/testrepo/Ignore (main)
$ cat hello_world_long.txt
Hello World

It's a wonderful day!

ravichandrans@FR-N-S096026 MINGW64 ~/Documents/GitHub/testrepo/Ignore (main)
$ diff -u hello_world.txt hello_world_long.txt
--- hello_world.txt     2021-05-23 14:16:05.787452400 -0400
+++ hello_world_long.txt        2021-05-23 14:16:29.139672500 -0400
@@ -1 +1,3 @@
 Hello World
 +
 +It's a wonderful day!


# to apply patch do the following

ravichandrans@FR-N-S096026 MINGW64 ~/Documents/GitHub/testrepo/Ignore (main)
$ diff -u hello_world.txt hello_world_long.txt > hello_world.diff

ravichandrans@FR-N-S096026 MINGW64 ~/Documents/GitHub/testrepo/Ignore (main)
$ patch < hello_world.diff
patching file hello_world.txt




## Git version

git --version


## Setup config
git config --global user.email "sr@gmail.com"
git config --global user.name "my name" 

# to check the config
git config -l
git config user.email

## Terminology

Git  (current working dir)
Working Tree  (workbench)
Staging Area (trolly that moves into the git tree)



1) make sure you are up-to-date with the main repo
2) git status
3) git add new_file
4) git status
5) git commit -m "made modifications"
6) git push

file can be in one of the 3 stages

modified (working dir)
staged   (staging area)
committed (git dir)


# check the log 

git log


# git -m -l file "comment"  to add and commit in one step

# look at gitlog. you will see the HEAD at the top this indicates the latest change

HEAD: indicates the latest checkout snapshot of the project



# do everything in GIT with git command 

# move a file
# advantage is git will add these changed files and ready for commit

git mov file.py file1.py

fig rm file.py 


# important commands

Command	Explanation & Link
git commit -a	Stages files automatically
git log -p	Produces patch text
git show	Shows various objects
git diff	Is similar to the Linux `diff` command, and can show the differences in various commits
git diff --staged	An alias to --cached, this will show all staged files compared to the named commit
git add -p	Allows a user to interactively review patches to add to the current commit
git mv	Similar to the Linux `mv` command, this moves a file
git rm	Similar to the Linux `rm` command, this deletes, or removes a file


# if you want to revert the changes before you add the file to the staging are use checkout 

git checkout mod_file.txt


# what happens if you added the file to the staging area and want to revert without committing. 
git status
git reset HEAD notinclude_file 




# AVOID --amend in public repo. It is ok to fix the comment in local before pushing. 
# use git --amend to modify the previous commit messages

For example, if you created two new files, file1 and file2 
but added/commited only one. 
You can fix this by adding the second file and 
commit --amend # this will open up the editor and amend your previous commit message


# git revert to revert before pushing. 

1) use git log to identify the SHA key 
2) git show HASH_ID to verify the commit
3) git revert to revert

  git show 639af01261844d29f281c83c8f21ec6b10cc57b2
  git revert 639af01261844d29f281c83c8f21ec6b10cc57b2

#--------------------------------------------------

git checkout is effectively used to switch branches.

git reset basically resets the repo, throwing away some changes. It’s somewhat difficult to understand, so reading the examples in the documentation may be a bit more useful.

There are some other useful articles online, which discuss more aggressive approaches to resetting the repo.

git commit --amend is used to make changes to commits after-the-fact, which can be useful for making notes about a given commit.

git revert makes a new commit which effectively rolls back a previous commit. It’s a bit like an undo command.

There are a few ways you can rollback commits in Git.

There are some interesting considerations about how git object data is stored, such as the usage of sha-1.

# branch

git status # just make sure it is updated

git branch  # to see al the branches

git branch new-feature
git branch # to check out 
git checkout new-feature

git checkout -b new-feature # created and moved to the new branch

